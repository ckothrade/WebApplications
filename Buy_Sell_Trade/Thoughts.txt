items to be discussed
- NoSQL 
- sequelize?
- mongoDB
- mongoose?
- nodejs
- express
- csrf done








- CSRF

In my application I utilized a node-express package middleware, "csurf", to manage csrf tokens.

CSRF (Cross-Site Request Forgery) is an attack method to abuse your sessions, tricking the application into executing malicious code. An example would be a mock site tricking a user into making operations under the belief that they are on the verified site. In the background, the mock site may have malicious code which alters the users intent, such as transferring money or making purchases. The  mock site then makes their own requests using the users valid Session status with the verified or correct site/server. 

CSRF helps prevent these attacks by ensuring that people can only utilize the servers sessions if they are utilizing the servers views rendered by the application (negating fake sites). A CSRF Token is a string value generated by the csurf package embedded in the forms/pages rendered by our application for every request which alters the user's state.

Requests made from unauthorized sites (mock pages) will not be accepted, as these mock forms will not have the CSRF Token embedded in them to verify against the server. Tokens (random hash values) are generated for every page rendered, helping prevent tokens from being stolen.

CSURF Token are passed into all rendered views in our application by utilizing an ExpressJS feature by utilizing the response.locals field in our app.js file. Our applciation then looks for csrf tokens in POST requests. Thus, since we're passing our Tokens using the local variables, all we need to do now is add the csurfTokens as hidden inputs in our forms rendered by our views.

CSRF protection is a must have to prevent sessions from being stolen. Not implementing this security measure can be a major vulnerability for any application.
