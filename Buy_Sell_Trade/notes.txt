INSTRUCTIONS---------------------------------------

-----Packages:

>npm init
>npm install nodemon --save-dev
>npm install express --save
>npm install ejs --save
>npm install body-parser --save
>npm install mongodb --save
>npm install mongoose --save
>npm install express-session --save
>npm install connect-mongodb-session --save
>npm install bcryptjs --save
>npm install csurf --save
>npm install connect-flash --save
>npm install nodemailer --save
>npm install nodemailer-sendgrid-transport --save
>npm install express-validator --save
>npm install multer --save
>npm install uuid --save 
>npm install pdfkit --save
>npm install helmet --save
>npm install compression --save 
>npm install morgan --save

-----Workflow:
*Install Packages
*Add script to package.json
- scripts : { "start": "node app.js" } or for nodemon { "start": "nodemon app.js" }

*Setup app.js
- set views engine
- setup body-parser & path (util/path.js ?)
- import routes
- listen on port (8088)?

*Setup routes
*Setup controllers
*Setup views
*Add Models (mongoose schema)
*Add conenction to mongodb using mongoose
*Add session middleware
*Use bcrypt to hash password for users
*CSRF tokens
- Ensure that your session can only be used when interacting with the 'servers' front-end
- Prevents thieves from stealing sessions in CSRF attacks
*Flash messaging for login & signup Errors
*nodemailer for sending emails
*use crypto for pword resets (add token fields to user model)
*implement input validation
*handle errors more efficiently
*handle uploading files (parsing with multer)
*install uuid to assist with creating unique id for saved files pathway on Windows
*implement serving files statically
*implement pdfkit for generating pdf docs
*add pagination to pages if needed...





EXTRAS------------------------------------------------------------

https://img.etimg.com/thumb/width-360,height-220,imgsize-152336,resizemode-1,msid-70711900/wealth/earn/looking-for-a-job-dont-make-these-12-mistakes/2-7.jpg


FINISH LATER -----------------------------------------------------

LEFT OFF----------------------------------------------------------
finished 337

fixed css for admin posts?


Errors:

-auth.js getNewPassword
-- Need to check user for null if it cant find a user bcuz resetToken expired.


todo: 
board/routes (scheduling)
post-detail.ejs   = fix if statment on add-to-schedule to show isAuthenticated
Fix -> post-detail.ejs (needs to show all post info?)
Fix -> schedule needs to show total hrs scheduled
Investigate -> routes for views/board/post-list.ejs  
Fix -> catch blocks which dont redirect should throw error to 500
Implement -> error handling on stub creation/retrieval? better implementation?
Change -> stubs colors on stubs.css

update:
add to schedule & remove from schedule need to be updated to account for slots and hrs

User model needs to be updated according to section 15 (name removed)

design-notes:

When adding posts to schedule, sometimes promise returned still doesn texecute quickly enough before
user is routed back to shcedule page (thus showin a non-updated schedule)

Tutorial:
models 
- shop_section14

leftoff
- watched vid 308... need to test add post validation

Questions:
-Find out why there is get posts and an admin get posts (for dev design reasons?)
- Edit post led to an error page?

ToDo:
-check validation on editing and adding a post. Finish validations
-check validation error css 
-update post models (proper time format?, more fields?)
-alter how posts are displayed (by date?)
-redesign css?
-delete pagination class from main.css if pagination is not used on getIndex or index.ejs?

======================================
add stub feature:


EDITED:
main.css


TESTING:
Note*: removeFromSchedule was edited by adding second argument

=======================================


IMPORTANT***:





Track(git):



NOTE:****

- clear out api key for mail (auth.js)
- clear out emails (auth.js)








Image Names & Windows
In the next lecture, you'll learn how to upload images in a REST world.

One important note for Windows users only:

On Windows, the file name that includes a date string is not really supported and will lead to some strange CORS errors. Adjust your code like this to avoid such errors:

Instead of

const storage = multer.diskStorage({
    destination: function(req, file, cb) {
        cb(null, 'images');
    },
    filename: function(req, file, cb) {
        cb(null, new Date().toISOString() + file.originalname);
    }
});
which we'll write in the next lecture, you should use this slightly modified version:

const { uuidv4 } = require('uuid');
 
const storage = multer.diskStorage({
    destination: function(req, file, cb) {
        cb(null, 'images');
    },
    filename: function(req, file, cb) {
        cb(null, uuidv4())
    }
});
For this, install the uuid package by running:

npm install --save uuid

To ensure that images can be loaded correctly on the frontend, you should also change the logic in the feed.js controller:

in createPosts, change the imageUrl const:

exports.createPost = (req, res, next) => {
    ...
    const imageUrl = req.file.path.replace("\\" ,"/");
    ...
}
and in updatePost (once we added that later):

exports.updatePost = (req, res, next) => {
    ...
    imageUrl = req.file.path.replace("\\","/");
}
On macOS and Linux, you can ignore that and stick to the code I show in the videos.













Another Solution

my solution for the isLoggedIn bug  ;

1) $ npm install uuid third party package - to create a really unique hash for filename

2) const { v4: uuidv4 } = require("uuid"); // integrate uuid into project by using the require function

3)  define the file name in the second argument as a combination of uuid hash plus only the file extension retrieved from the file.originalname - splitting

const fileStorage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "images");
  },
  filename: (req, file, cb) => {
    cb(null, uuidv4() + "." + file.originalname.split(".")[1]);
  },
});




BSTBST
BSTBSTBST

Questions:
-difference between getIndex (/) & getPosts (/posts)  ? .... (controllers/board) (board & post-list 
.ejs respectively)

- Currently, clicking bookmark with 

BST organized:
admin/posts 
- should display only the users posts which they have created (need post navigation item?)






BST ToDo:

ADD VALIDATIONS
- postAddItem (controller/admin.js)

Change css
- bookmark.ejs (change schedule.css to bookmark.css & fix class names)




Errors/Bugs:
- If adding an item fails, the page reloaded will be an editing page. Then, if you attempt to edit, there is no post to find when it comes to editing because it was never created. Gets a TypeError, cannot set property of 'null'




sources:
- category css
https://moderncss.dev/custom-select-styles-with-pure-css/